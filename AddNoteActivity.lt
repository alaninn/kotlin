package com.alan.appdiariolocal

import android.content.Intent
import android.os.Bundle
import android.text.TextUtils
import android.widget.Button
import android.widget.EditText
import android.widget.LinearLayout
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity

class AddNoteActivity : AppCompatActivity() {
    private lateinit var expenseContainer: LinearLayout
    private lateinit var expenseNameEditTexts: MutableList<EditText>
    private lateinit var expenseValueEditTexts: MutableList<EditText>
    private var expenseCounter = 1

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_add_note)

        val buttonSave = findViewById<Button>(R.id.buttonSave)
        val buttonAddExpense = findViewById<Button>(R.id.buttonAddExpense)
        expenseContainer = findViewById(R.id.expenseContainer)
        expenseNameEditTexts = mutableListOf() // Inicializar la lista
        expenseValueEditTexts = mutableListOf() // Inicializar la lista

        buttonAddExpense.setOnClickListener {
            addExpenseField()
        }

        buttonSave.setOnClickListener {
            val date = findViewById<EditText>(R.id.editTextDate).text.toString()
            val cashSales = findViewById<EditText>(R.id.editTextCashSales).text.toString().toLongOrNull() ?: 0
            val onlineSales = findViewById<EditText>(R.id.editTextOnlineSales).text.toString().toLongOrNull() ?: 0

            var allFieldsValid = true

            if (TextUtils.isEmpty(date)) {
                findViewById<EditText>(R.id.editTextDate).error = "Este campo es obligatorio"
                allFieldsValid = false
            }

            if (cashSales == 0L) {
                findViewById<EditText>(R.id.editTextCashSales).error = "Este campo es obligatorio"
                allFieldsValid = false
            }

            if (onlineSales == 0L) {
                findViewById<EditText>(R.id.editTextOnlineSales).error = "Este campo es obligatorio"
                allFieldsValid = false
            }

            if (allFieldsValid) {
                val expenses = mutableListOf<Pair<String, Long>>()
                for (i in 0 until expenseCounter - 1) {
                    val nombre = expenseNameEditTexts[i].text.toString()
                    val valor = expenseValueEditTexts[i].text.toString().toLongOrNull() ?: 0

                    if (TextUtils.isEmpty(nombre)) {
                        expenseNameEditTexts[i].error = "Este campo es obligatorio"
                        allFieldsValid = false
                        break
                    }

                    expenses.add(Pair(nombre, valor))
                }

                if (allFieldsValid || !expenses.isEmpty()) {
                    val dailyRecord = DailyRecord(date, expenses, cashSales, onlineSales)
                    val resultIntent = Intent()
                    resultIntent.putExtra("newRecord", dailyRecord)
                    setResult(RESULT_OK, resultIntent)
                    finish()
                } else {
                    Toast.makeText(this, "Por favor, complete todos los campos obligatorios o agregue al menos un campo de gastos.", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

    private fun addExpenseField() {
        val newRow = LinearLayout(this)
        newRow.layoutParams = LinearLayout.LayoutParams(
            LinearLayout.LayoutParams.MATCH_PARENT,
            LinearLayout.LayoutParams.WRAP_CONTENT
        )
        newRow.orientation = LinearLayout.HORIZONTAL

        val newExpenseNameEditText = EditText(this)
        newExpenseNameEditText.layoutParams = LinearLayout.LayoutParams(
            0,
            LinearLayout.LayoutParams.WRAP_CONTENT,
            1f
        )
        newExpenseNameEditText.hint = "Nombre del Gasto $expenseCounter"

        val newExpenseValueEditText = EditText(this)
        newExpenseValueEditText.layoutParams = LinearLayout.LayoutParams(
            0,
            LinearLayout.LayoutParams.WRAP_CONTENT,
            1f
        )
        newExpenseValueEditText.hint = "Valor"
        newExpenseValueEditText.inputType = android.text.InputType.TYPE_CLASS_NUMBER

        newRow.addView(newExpenseNameEditText)
        newRow.addView(newExpenseValueEditText)

        expenseContainer.addView(newRow, expenseContainer.childCount - 1)

        // Agregar los EditTexts a las listas
        expenseNameEditTexts.add(newExpenseNameEditText)
        expenseValueEditTexts.add(newExpenseValueEditText)

        expenseCounter++
    }
}
